#!/bin/bash
#
# Traffic Split Update Script
# Updates NGINX load balancer weights for gradual migration
#

set -euo pipefail

# Configuration
NGINX_CONFIG="/etc/nginx/conf.d/upstream.conf"
NGINX_BACKUP="/etc/nginx/conf.d/upstream.conf.backup"
LOG_FILE="/var/log/migration/traffic_split.log"

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to log messages
log_message() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "$LOG_FILE"
}

# Function to validate percentage
validate_percentage() {
    local percentage=$1
    if ! [[ "$percentage" =~ ^[0-9]+$ ]] || [ "$percentage" -lt 0 ] || [ "$percentage" -gt 100 ]; then
        echo -e "${RED}Error: Invalid percentage. Must be between 0 and 100.${NC}"
        exit 1
    fi
}

# Function to test nginx config
test_nginx_config() {
    if ! nginx -t 2>/dev/null; then
        echo -e "${RED}Error: Invalid NGINX configuration${NC}"
        return 1
    fi
    return 0
}

# Function to create upstream config
create_upstream_config() {
    local new_weight=$1
    local legacy_weight=$((100 - new_weight))
    
    cat <<EOF
# Auto-generated by migration script
# Last updated: $(date '+%Y-%m-%d %H:%M:%S')
# Traffic split: Legacy=${legacy_weight}%, New=${new_weight}%

upstream legacy_backend {
    server localhost:8000 weight=${legacy_weight};
}

upstream new_backend {
    server localhost:8001 weight=${new_weight};
}

upstream websocket_backend {
    # WebSocket connections always go to new system if weight > 0
    $(if [ "$new_weight" -gt 0 ]; then
        echo "server localhost:9001;"
    else
        echo "server localhost:8000;"
    fi)
}
EOF
}

# Function to update metrics
update_metrics() {
    local new_percentage=$1
    
    # Update Prometheus metrics
    cat <<EOF | curl -X POST --data-binary @- http://localhost:9091/metrics/job/migration
# TYPE migration_traffic_split gauge
# HELP migration_traffic_split Current traffic split percentage to new system
migration_traffic_split ${new_percentage}
# TYPE migration_update_timestamp gauge
# HELP migration_update_timestamp Unix timestamp of last traffic split update
migration_update_timestamp $(date +%s)
EOF
}

# Function to send notification
send_notification() {
    local old_percentage=$1
    local new_percentage=$2
    local executor=${3:-"Unknown"}
    
    # Slack notification
    if [ -n "${SLACK_WEBHOOK_URL:-}" ]; then
        curl -X POST "${SLACK_WEBHOOK_URL}" \
            -H 'Content-Type: application/json' \
            -d "{
                \"text\": \"🔄 Traffic Split Updated\",
                \"attachments\": [{
                    \"color\": \"good\",
                    \"fields\": [
                        {\"title\": \"Previous Split\", \"value\": \"${old_percentage}% to new system\", \"short\": true},
                        {\"title\": \"New Split\", \"value\": \"${new_percentage}% to new system\", \"short\": true},
                        {\"title\": \"Executor\", \"value\": \"${executor}\", \"short\": true},
                        {\"title\": \"Timestamp\", \"value\": \"$(date '+%Y-%m-%d %H:%M:%S')\", \"short\": true}
                    ]
                }]
            }" 2>/dev/null || true
    fi
    
    # Email notification
    if [ -n "${MIGRATION_EMAIL:-}" ]; then
        echo "Traffic split updated from ${old_percentage}% to ${new_percentage}% by ${executor}" | \
            mail -s "Migration: Traffic Split Update" "${MIGRATION_EMAIL}" 2>/dev/null || true
    fi
}

# Function to verify health after update
verify_health() {
    local max_retries=5
    local retry_count=0
    
    echo "Verifying system health after update..."
    
    while [ $retry_count -lt $max_retries ]; do
        sleep 2
        
        # Check legacy system
        if [ $(curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/health) != "200" ]; then
            echo -e "${YELLOW}Warning: Legacy system health check failed${NC}"
        fi
        
        # Check new system
        if [ $(curl -s -o /dev/null -w "%{http_code}" http://localhost:8001/api/v2/health) != "200" ]; then
            echo -e "${YELLOW}Warning: New system health check failed${NC}"
        fi
        
        # Check NGINX
        if nginx -t 2>/dev/null && pgrep nginx > /dev/null; then
            echo -e "${GREEN}✓ NGINX is healthy${NC}"
            return 0
        fi
        
        retry_count=$((retry_count + 1))
    done
    
    echo -e "${RED}Health check failed after ${max_retries} attempts${NC}"
    return 1
}

# Main execution
main() {
    local NEW_PERCENTAGE=${1:-}
    local EXECUTOR=${2:-${USER:-"script"}}
    
    # Check if percentage provided
    if [ -z "$NEW_PERCENTAGE" ]; then
        echo "Usage: $0 <percentage> [executor]"
        echo "Example: $0 25 john.doe"
        exit 1
    fi
    
    # Validate percentage
    validate_percentage "$NEW_PERCENTAGE"
    
    # Create log directory if it doesn't exist
    mkdir -p "$(dirname "$LOG_FILE")"
    
    log_message "Starting traffic split update to ${NEW_PERCENTAGE}% (executor: ${EXECUTOR})"
    
    # Get current percentage if config exists
    OLD_PERCENTAGE=0
    if [ -f "$NGINX_CONFIG" ]; then
        OLD_PERCENTAGE=$(grep -oP 'new_backend\s+{\s+server\s+localhost:8001\s+weight=\K\d+' "$NGINX_CONFIG" 2>/dev/null || echo "0")
    fi
    
    # Check if already at target percentage
    if [ "$OLD_PERCENTAGE" -eq "$NEW_PERCENTAGE" ]; then
        echo -e "${YELLOW}Already at ${NEW_PERCENTAGE}% traffic split. No changes needed.${NC}"
        exit 0
    fi
    
    # Backup current config
    if [ -f "$NGINX_CONFIG" ]; then
        cp "$NGINX_CONFIG" "$NGINX_BACKUP"
        log_message "Backed up current config to $NGINX_BACKUP"
    fi
    
    # Create new config
    NEW_CONFIG=$(create_upstream_config "$NEW_PERCENTAGE")
    
    # Write new config to temp file first
    TEMP_CONFIG="/tmp/upstream.conf.tmp"
    echo "$NEW_CONFIG" > "$TEMP_CONFIG"
    
    # Test with temp config
    cp "$TEMP_CONFIG" "$NGINX_CONFIG"
    
    if ! test_nginx_config; then
        echo -e "${RED}Error: New configuration failed validation${NC}"
        
        # Restore backup if exists
        if [ -f "$NGINX_BACKUP" ]; then
            cp "$NGINX_BACKUP" "$NGINX_CONFIG"
            log_message "Restored previous configuration"
        fi
        
        rm -f "$TEMP_CONFIG"
        exit 1
    fi
    
    # Reload NGINX
    echo "Reloading NGINX..."
    if ! nginx -s reload; then
        echo -e "${RED}Error: Failed to reload NGINX${NC}"
        
        # Restore backup
        if [ -f "$NGINX_BACKUP" ]; then
            cp "$NGINX_BACKUP" "$NGINX_CONFIG"
            nginx -s reload
            log_message "Restored previous configuration after reload failure"
        fi
        
        rm -f "$TEMP_CONFIG"
        exit 1
    fi
    
    rm -f "$TEMP_CONFIG"
    
    # Verify health
    if ! verify_health; then
        echo -e "${YELLOW}Warning: Health check issues detected${NC}"
    fi
    
    # Update metrics
    update_metrics "$NEW_PERCENTAGE"
    
    # Send notifications
    send_notification "$OLD_PERCENTAGE" "$NEW_PERCENTAGE" "$EXECUTOR"
    
    # Log success
    log_message "Successfully updated traffic split from ${OLD_PERCENTAGE}% to ${NEW_PERCENTAGE}%"
    
    # Display summary
    echo ""
    echo -e "${GREEN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo -e "${GREEN}✓ Traffic Split Update Complete${NC}"
    echo -e "${GREEN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo "Previous: ${OLD_PERCENTAGE}% → New System"
    echo "Current:  ${NEW_PERCENTAGE}% → New System"
    echo "Legacy:   $((100 - NEW_PERCENTAGE))% → Legacy System"
    echo -e "${GREEN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    
    # Update migration config
    if [ -f "/app/config/migration_config.yaml" ]; then
        python3 -c "
import yaml
with open('/app/config/migration_config.yaml', 'r') as f:
    config = yaml.safe_load(f)
config['rollout']['canary_percentage'] = ${NEW_PERCENTAGE}
config['migration']['phase'] = '${NEW_PERCENTAGE}_percent'
with open('/app/config/migration_config.yaml', 'w') as f:
    yaml.dump(config, f)
" 2>/dev/null || true
    fi
}

# Run main function
main "$@"